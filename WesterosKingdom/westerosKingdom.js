class WesterosExperience {
    constructor() {
        this.audioEnabled = false;
        this.audio = null;
        this.currentLanguage = localStorage.getItem('language') || 'tr';
        this.translations = {
            tr: {
                title: "Westeros Krallƒ±ƒüƒ±",
                subtitle: "Yedi Krallƒ±ƒüƒ±n Kapƒ±larƒ±",
                placeholder: "Asil ƒ∞sminizi Yazƒ±nƒ±z, Leyd/Lord",
                enterButton: "Krallƒ±ƒüa Giri≈ü",
                welcome: "Ho≈ü Geldiniz",
                leaveButton: "Krallƒ±ktan Ayrƒ±l",
                quotes: [
                    "Kƒ±≈ü geliyor, ve √∂l√ºler onunla geliyor...",
                    "Yedi Krallƒ±k tek bir kƒ±lƒ±cƒ±n g√∂lgesinde birle≈üti.",
                    "Tahtlarƒ±n oyununda, ya kazanƒ±rsƒ±n ya da √∂l√ºrs√ºn.",
                    "Ejderhalarƒ±n dansƒ± ba≈ülƒ±yor..."
                ],
                regions: ['‚öîÔ∏è Kƒ±≈üyarƒ±', 'üè∞ Kralƒ±skapƒ±', 'üó°Ô∏è Casterly Kayasƒ±', 'üèπ Eyrie'],
                days: ['Pazar', 'Pazartesi', 'Salƒ±', '√áar≈üamba', 'Per≈üembe', 'Cuma', 'Cumartesi']
            },
            en: {
                title: "Kingdom of Westeros",
                subtitle: "Gates of the Seven Kingdoms",
                placeholder: "Enter Your Noble Name, Lady/Lord",
                enterButton: "Enter the Realm",
                welcome: "Welcome",
                leaveButton: "Leave the Realm",
                quotes: [
                    "Wƒ±nter ƒ±s comƒ±ng, and the dead come wƒ±th ƒ±t...",
                    "Seven Kƒ±ngdoms unƒ±ted under one sword.",
                    "In the game of thrones, you wƒ±n or you dƒ±e.",
                    "The dance of dragons begƒ±ns..."
                ],
                regions: ['‚öîÔ∏è Wƒ±nterfell', 'üè∞ Kƒ±ng\'s Landƒ±ng', 'üó°Ô∏è Casterly Rock', 'üèπ The Eyrƒ±e'],
                days: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday']
            },
            de: {
                title: "K√∂nigreich Westeros",
                subtitle: "Tore der Sieben K√∂nigreiche",
                placeholder: "Geben Sie Ihren edlen Namen ein, Lady/Lord",
                enterButton: "Betreten Sie das Reich",
                welcome: "Wƒ±llkommen",
                leaveButton: "Verlassen Sie das Reich",
                quotes: [
                    "Der Wƒ±nter naht, und die Toten kommen mƒ±t ƒ±hm...",
                    "Sƒ±eben K√∂nƒ±greƒ±che vereƒ±nt unter einem Schwert.",
                    "Im Spiel der Throne gewƒ±nnst du oder stƒ±rbst.",
                    "Der Tanz der Drachen begƒ±nnt..."
                ],
                regions: ['‚öîÔ∏è Wƒ±nterfell', 'üè∞ K√∂nƒ±gsmund', 'üó°Ô∏è Casterlystein', 'üèπ Hohenehr'],
                days: ['Sonntag', 'Montag', 'Dienstag', 'Mittwoch', 'Donnerstag', 'Freitag', 'Samstag']
            }
        };

        this.initializeElements();
        this.setupEventListeners();
        this.updateContent();
        this.startClock();
    }

    initializeElements() {
        this.loginScreen = document.getElementById('loginScreen');
        this.welcomeScreen = document.getElementById('welcomeScreen');
        this.nameInput = document.getElementById('nameInput');
        this.welcomeName = document.getElementById('welcomeName');
        this.welcomeText = document.getElementById('welcomeText');
        this.hoursElement = document.getElementById('hours');
        this.minutesElement = document.getElementById('minutes');
        this.quote = document.getElementById('quote');
        this.regionDisplay = document.getElementById('regionDisplay');
        this.volumeSlider = document.getElementById('volumeSlider');
    }

    setupEventListeners() {
        // Dil deƒüi≈ütirme butonlarƒ±
        document.querySelectorAll('.lang-button').forEach(button => {
            button.addEventListener('click', (e) => {
                const lang = e.target.getAttribute('data-lang');
                this.changeLanguage(lang);
            });
        });

        // Giri≈ü butonu
        document.querySelector('#loginScreen .submit-button').addEventListener('click', () => {
            this.enterRealm();
        });

        // √áƒ±kƒ±≈ü butonu
        document.querySelector('#welcomeScreen .submit-button').addEventListener('click', () => {
            this.leaveRealm();
        });

        // Enter tu≈üu ile giri≈ü
        this.nameInput.addEventListener('keypress', (e) => {
            if (e.key === 'Enter') {
                this.enterRealm();
            }
        });

        // Ses kontrolleri
        const audioToggle = document.getElementById('audioToggle');
        if (audioToggle) {
            audioToggle.addEventListener('click', () => this.toggleAudio());
            audioToggle.addEventListener('mouseover', () => {
                if (this.volumeSlider) this.volumeSlider.style.display = 'block';
            });
        }

        if (this.volumeSlider) {
            this.volumeSlider.addEventListener('input', (e) => {
                if (this.audio) {
                    this.audio.volume = e.target.value / 100;
                }
            });
        }

        document.addEventListener('click', (e) => {
            if (this.volumeSlider && !e.target.matches('#audioToggle, #volumeSlider')) {
                this.volumeSlider.style.display = 'none';
            }
        });
    }

    setupAudio() {
    if (!this.audio) {
        this.audio = new Audio('got-theme.mp3');
        this.audio.loop = true;
        // Ba≈ülangƒ±√ß ses seviyesini d√º≈ü√ºk ayarla (0.1 = %10 ses)
        this.audio.volume = 0.1;
        
        
        // Volume slider kontrol√º
        const volumeSlider = document.getElementById('volumeSlider');
        if (volumeSlider) {
            // Slider'ƒ± ba≈ülangƒ±√ß ses seviyesine ayarla
            volumeSlider.value = this.audio.volume * 100;
            
            // Slider deƒüi≈ütiƒüinde sesi g√ºncelle
            volumeSlider.addEventListener('input', (e) => {
                this.audio.volume = e.target.value / 100;
            });
        }
    }
}

    toggleAudio() {
        this.audioEnabled = !this.audioEnabled;
        const iconElement = document.querySelector('#audioToggle i');

        if (this.audioEnabled) {
            this.setupAudio();
            this.audio.play().catch(console.error);
            iconElement.setAttribute('data-lucide', 'volume-2');
        } else {
            this.audio?.pause();
            iconElement.setAttribute('data-lucide', 'volume-x');
        }
        lucide.createIcons();
    }

    changeLanguage(lang) {
        this.currentLanguage = lang;
        localStorage.setItem('language', lang);
        
        document.querySelectorAll('.lang-button').forEach(btn => {
            btn.classList.remove('active');
            if (btn.getAttribute('data-lang') === lang) {
                btn.classList.add('active');
            }
        });

        this.updateContent();
    }

    updateContent() {
        const content = this.translations[this.currentLanguage];
        
        document.querySelector('.title').textContent = content.title;
        document.querySelector('.subtitle').textContent = content.subtitle;
        this.nameInput.placeholder = content.placeholder;
        document.querySelector('#loginScreen .submit-button').textContent = content.enterButton;
        
        if (this.welcomeName.textContent) {
            this.welcomeText.textContent = `${content.welcome},`;
            this.setRandomQuote();
            this.setRandomRegion();
        }
        
        document.querySelector('#welcomeScreen .submit-button').textContent = content.leaveButton;
    }

    startClock() {
        this.updateClock();
        setInterval(() => this.updateClock(), 1000);
    }

    updateClock() {
        const now = new Date();
        const hours = String(now.getHours()).padStart(2, '0');
        const minutes = String(now.getMinutes()).padStart(2, '0');
        const seconds = String(now.getSeconds()).padStart(2, '0');
        const dayName = this.translations[this.currentLanguage].days[now.getDay()];
        
        // Tam tarih formatƒ± i√ßin
        const day = String(now.getDate()).padStart(2, '0');
        const month = String(now.getMonth() + 1).padStart(2, '0');
        const year = now.getFullYear();
        const fullDate = `${day}/${month}/${year}`;

        this.hoursElement.textContent = hours;
        this.minutesElement.textContent = minutes;

        // Saniye ekle
        let secondsElement = document.querySelector('.seconds-block');
        if (!secondsElement) {
            secondsElement = document.createElement('div');
            secondsElement.className = 'time-block seconds-block';
            const separator = document.createElement('div');
            separator.className = 'time-separator';
            separator.textContent = ':';
            this.minutesElement.parentNode.appendChild(separator);
            this.minutesElement.parentNode.appendChild(secondsElement);
        }
        secondsElement.textContent = seconds;

        // G√ºn ve tarih g√∂sterimi
        const clockDisplay = document.querySelector('.clock-display');
        let dateContainer = document.querySelector('.date-container');
        
        if (!dateContainer) {
            dateContainer = document.createElement('div');
            dateContainer.className = 'date-container';
            clockDisplay.parentNode.insertBefore(dateContainer, clockDisplay.nextSibling);
            
            const dayDisplay = document.createElement('div');
            dayDisplay.className = 'time-block day-display';
            
            const dateDisplay = document.createElement('div');
            dateDisplay.className = 'time-block date-display';
            
            dateContainer.appendChild(dayDisplay);
            dateContainer.appendChild(dateDisplay);
        }

        const dayDisplay = dateContainer.querySelector('.day-display');
        const dateDisplay = dateContainer.querySelector('.date-display');
        
        dayDisplay.textContent = dayName;
        dateDisplay.textContent = fullDate;
    }

    setRandomQuote() {
        const quotes = this.translations[this.currentLanguage].quotes;
        this.quote.textContent = quotes[Math.floor(Math.random() * quotes.length)];
    }

    setRandomRegion() {
        const regions = this.translations[this.currentLanguage].regions;
        this.regionDisplay.textContent = regions[Math.floor(Math.random() * regions.length)];
    }

    enterRealm() {
        const name = this.nameInput.value.trim();
        if (!name) return;

        if (!this.audioEnabled) {
            this.toggleAudio(); // Giri≈ü yapƒ±ldƒ±ƒüƒ±nda m√ºziƒüi ba≈ülat
        }

        this.loginScreen.style.display = 'none';
        this.welcomeScreen.style.display = 'block';
        this.welcomeName.textContent = name;
        this.welcomeText.textContent = `${this.translations[this.currentLanguage].welcome},`;
        
        this.setRandomQuote();
        this.setRandomRegion();
    }

    leaveRealm() {
        if (this.audioEnabled) {
            this.toggleAudio(); // √áƒ±kƒ±≈ü yapƒ±ldƒ±ƒüƒ±nda m√ºziƒüi durdur
        }

        this.loginScreen.style.display = 'block';
        this.welcomeScreen.style.display = 'none';
        this.nameInput.value = '';
    }
}

// Sayfanƒ±n y√ºklenmesi tamamlandƒ±ƒüƒ±nda deneyimi ba≈ülat
document.addEventListener('DOMContentLoaded', () => {
    window.westerosExperience = new WesterosExperience();
});
